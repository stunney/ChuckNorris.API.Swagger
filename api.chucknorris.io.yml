openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/stunney/ChuckNorris/1.0.0
  - description: Live Site
    url: https://api.chucknorris.io
info:
  description: This is a simple API
  version: "1.0.0"
  title: api.ChuckNorris.io definition
  contact:
    email: stephen.tunney@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: admins
    description: Secured Admin-only calls
  - name: developers
    description: Operations available to regular developers
paths:
  /jokes/random:
    get:
      tags:
        - developers
      summary: searches inventory
      operationId: searchJokes
      description: |
        By passing in the appropriate options, get a joke from the system
      parameters:
        - in: query
          name: name
          description: pass an name to be replaced in the jokes
          required: false
          schema:
            type: string
        - in: query
          name: category
          description: the category you desire to be the joke to be in the domain of
          schema:
            type: string
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JokeItem'
        '400':
          description: bad input parameter
        '404':
          description: may occur if a joke cannot be found
  /jokes/search:
    get:
      tags:
        - developers
      summary: query for jokes
      operationId: queryJokes
      description: |
        By passing in the appropriate options, you can search for
        available jokes in the system by keywords
      parameters:
        - in: query
          name: query
          description: pass in a query to search for a joke with
          required: true
          schema:
            type: string        
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JokeItem'
        '400':
          description: bad input parameter
        '404':
          description: may occur if a joke cannot be found
  /jokes/categories:
    get:
      tags:
        - developers
      summary: returns all valid categories
      operationId: searchCategories
      description: |
        Returns all valid categories.
      responses:
        '200':
          description: categories were found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
components:
  schemas:
    JokeItem:
      type: object
      required:
        - id
        - name
        - manufacturer
        - releaseDate
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        value:
          type: string
          example: A really funny joke
        url:
          type: string
          format: url
        icon_url:
          type: string
          format: url