/*
 * api.ChuckNorris.io definition
 *
 * This is a simple API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: stephen.tunney@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DevelopersApiController : ControllerBase
    { 
        /// <summary>
        /// query for jokes
        /// </summary>
        /// <remarks>By passing in the appropriate options, you can search for available jokes in the system by keywords </remarks>
        /// <param name="query">pass in a query to search for a joke with</param>
        /// <response code="200">search results matching criteria</response>
        /// <response code="400">bad input parameter</response>
        /// <response code="404">may occur if a joke cannot be found</response>
        [HttpGet]
        [Route("/stunney/ChuckNorris/1.0.0/jokes/search")]
        [ValidateModelState]
        [SwaggerOperation("QueryJokes")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<JokeItem>), description: "search results matching criteria")]
        public virtual IActionResult QueryJokes([FromQuery][Required()]string query)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<JokeItem>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"icon_url\" : \"http://example.com/aeiou\",\n  \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n  \"value\" : \"A really funny joke\",\n  \"url\" : \"http://example.com/aeiou\"\n}, {\n  \"icon_url\" : \"http://example.com/aeiou\",\n  \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n  \"value\" : \"A really funny joke\",\n  \"url\" : \"http://example.com/aeiou\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<JokeItem>>(exampleJson)
                        : default(List<JokeItem>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// returns all valid categories
        /// </summary>
        /// <remarks>Returns all valid categories. </remarks>
        /// <response code="200">categories were found</response>
        [HttpGet]
        [Route("/stunney/ChuckNorris/1.0.0/jokes/categories")]
        [ValidateModelState]
        [SwaggerOperation("SearchCategories")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Object>), description: "categories were found")]
        public virtual IActionResult SearchCategories()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Object>));
            string exampleJson = null;
            exampleJson = "[ { }, { } ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Object>>(exampleJson)
                        : default(List<Object>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// searches inventory
        /// </summary>
        /// <remarks>By passing in the appropriate options, get a joke from the system </remarks>
        /// <param name="name">pass an name to be replaced in the jokes</param>
        /// <param name="category">the category you desire to be the joke to be in the domain of</param>
        /// <response code="200">search results matching criteria</response>
        /// <response code="400">bad input parameter</response>
        /// <response code="404">may occur if a joke cannot be found</response>
        [HttpGet]
        [Route("/stunney/ChuckNorris/1.0.0/jokes/random")]
        [ValidateModelState]
        [SwaggerOperation("SearchJokes")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<JokeItem>), description: "search results matching criteria")]
        public virtual IActionResult SearchJokes([FromQuery]string name, [FromQuery]string category)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<JokeItem>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"icon_url\" : \"http://example.com/aeiou\",\n  \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n  \"value\" : \"A really funny joke\",\n  \"url\" : \"http://example.com/aeiou\"\n}, {\n  \"icon_url\" : \"http://example.com/aeiou\",\n  \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n  \"value\" : \"A really funny joke\",\n  \"url\" : \"http://example.com/aeiou\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<JokeItem>>(exampleJson)
                        : default(List<JokeItem>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
